name: Java CI/CD with Gradle and Docker
 
on:
  push:
    branches:
      - main
 
jobs:
  deploy:
    runs-on: ubuntu-latest
 
    steps:
      - uses: actions/checkout@v3
 
      # Java JDK 11 버전을 이용합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
 
      # gradlew에 실행 권한을 부여합니다.
      - name: Grant execute permisson for gradlew
        run: chmod +x gradlew
 
      # test는 CI 과정에서 수행되므로 여기서는 `-x`로 테스트를 생략했습니다.
      # `--stacktrace`로 더 자세한 로그가 출력되게 해줍니다.
      - name: Build with Gradle (without Test)
        run: ./gradlew clean build -x test --stacktrace
 
      # docker hub에 로그인하고 이미지를 빌드합니다. 이후에 push를 진행합니다.
      # docker_username을 적지 않으면 push 시에 요청이 거부될 수 있습니다.
      - name: Docker Hub build & push
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} .
          docker images
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
 
      # EC2에 접속하고 배포합니다.
      - name: Deploy to Prod WAS Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          # docker-compose가 있는 디렉토리로 이동해야 수행됩니다.
          script: |
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            sudo docker rm -f $(sudo docker ps -qa)
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
            sudo docker run -p 8080:8080 {{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} --env-file ./.env
 
